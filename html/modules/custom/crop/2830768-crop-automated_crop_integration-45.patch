diff --git a/config/schema/crop.schema.yml b/config/schema/crop.schema.yml
index e4285ac..abf43db 100644
--- a/config/schema/crop.schema.yml
+++ b/config/schema/crop.schema.yml
@@ -47,6 +47,9 @@ image.effect.crop_crop:
     crop_type:
       label: 'Crop type'
       type: string
+    automatic_crop_provider:
+      label: 'Automatic crop provider'
+      type: string
 
 crop.settings:
   type: config_object
diff --git a/src/Events/AutomaticCrop.php b/src/Events/AutomaticCrop.php
new file mode 100644
index 0000000..cc893d4
--- /dev/null
+++ b/src/Events/AutomaticCrop.php
@@ -0,0 +1,107 @@
+<?php
+
+namespace Drupal\crop\Events;
+
+use Drupal\Core\Image\ImageInterface;
+use Drupal\crop\CropInterface;
+use Drupal\crop\Entity\CropType;
+use Symfony\Component\EventDispatcher\Event;
+
+/**
+ * Represents automatic crop action as event.
+ */
+class AutomaticCrop extends Event {
+
+  /**
+   * The crop entity.
+   *
+   * @var \Drupal\crop\CropInterface|false
+   */
+  protected $crop = FALSE;
+
+
+  /**
+   * The image resource to crop.
+   *
+   * @var \Drupal\Core\Image\ImageInterface
+   */
+  protected $image;
+
+  /**
+   * The crop type loaded.
+   *
+   * @var \Drupal\crop\Entity\CropType
+   */
+  protected $cropType;
+
+  /**
+   * All data required by crop providers.
+   *
+   * @var array
+   */
+  protected $configuration;
+
+  /**
+   * Constructs a EntitySelectionEvent object.
+   *
+   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param \Drupal\crop\Entity\CropType $cropType
+   * @param $configuration
+   */
+  public function __construct(ImageInterface $image, CropType $cropType, array $configuration) {
+    $this->image = $image;
+    $this->cropType = $cropType;
+    $this->configuration = $configuration;
+  }
+
+  /**
+   * Set calculated crop instance.
+   *
+   * @param \Drupal\crop\CropInterface $crop
+   *   The crop entity instance.
+   */
+  public function setCrop(CropInterface $crop) {
+    $this->crop = $crop;
+  }
+
+  /**
+   * Get crop instance.
+   *
+   * @return \Drupal\crop\CropInterface|false
+   *   List of fallbacks.
+   */
+  public function getCrop() {
+    return $this->crop;
+  }
+
+  /**
+   * Get the crop type entity.
+   *
+   * @return \Drupal\crop\Entity\CropType
+   *   The crop type entity loaded.
+   */
+  public function getCropType() {
+    return $this->cropType;
+  }
+
+  /**
+   * Get image to crop.
+   *
+   * @return \Drupal\Core\Image\ImageInterface
+   *   The image resource.
+   */
+  public function getImage() {
+    return $this->image;
+  }
+
+  /**
+   * Get all configurations to generate automatic crop.
+   *
+   * @return array
+   *   All data to be used by automatic crop providers.
+   */
+  public function getConfiguration() {
+    return $this->configuration;
+  }
+
+}
diff --git a/src/Events/AutomaticCropProviders.php b/src/Events/AutomaticCropProviders.php
new file mode 100644
index 0000000..05daad3
--- /dev/null
+++ b/src/Events/AutomaticCropProviders.php
@@ -0,0 +1,49 @@
+<?php
+
+namespace Drupal\crop\Events;
+
+use Symfony\Component\EventDispatcher\Event;
+
+/**
+ * Collects "Automatic crop" providers.
+ */
+class AutomaticCropProviders extends Event {
+
+  /**
+   * Automatic Crop provider list.
+   *
+   * @var array
+   */
+  protected $providers = [];
+
+  /**
+   * Adds provider.
+   *
+   * @param array $provider
+   *   Register provider to providers list.
+   */
+  public function registerProvider(array $provider) {
+    $this->providers[key($provider)] = current($provider);
+  }
+
+  /**
+   * Sets automatic crop providers.
+   *
+   * @param array $providers
+   *   List of automatic crop providers.
+   */
+  public function setProviders(array $providers) {
+    $this->providers = $providers;
+  }
+
+  /**
+   * Gets automatic crop providers.
+   *
+   * @return array
+   *   List of providers.
+   */
+  public function getProviders() {
+    return $this->providers;
+  }
+
+}
diff --git a/src/Events/Events.php b/src/Events/Events.php
new file mode 100644
index 0000000..671f74a
--- /dev/null
+++ b/src/Events/Events.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Drupal\crop\Events;
+
+/**
+ * Contains all events thrown by crop API.
+ */
+final class Events {
+
+  /**
+   * The event to subscribe to add provider as manual crop fallback provider.
+   *
+   * @var string
+   */
+  const AUTOMATIC_CROP_PROVIDERS = 'crop.automatic_crop_providers';
+
+  /**
+   * The event to subscribe to automatic crop generate for crop API.
+   *
+   * @var string
+   */
+  const AUTOMATIC_CROP = 'crop.automatic_crop';
+
+}
diff --git a/src/Plugin/ImageEffect/CropEffect.php b/src/Plugin/ImageEffect/CropEffect.php
index 5f41e6b..f6930b6 100644
--- a/src/Plugin/ImageEffect/CropEffect.php
+++ b/src/Plugin/ImageEffect/CropEffect.php
@@ -10,9 +10,13 @@ use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\crop\CropInterface;
 use Drupal\crop\CropStorageInterface;
 use Drupal\crop\Entity\Crop;
+use Drupal\crop\Events\AutomaticCrop;
+use Drupal\crop\Events\AutomaticCropProviders;
+use Drupal\crop\Events\Events;
 use Drupal\image\ConfigurableImageEffectBase;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
  * Crops an image resource.
@@ -40,11 +44,11 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   protected $typeStorage;
 
   /**
-   * Crop entity.
+   * Crop entity or Automated Crop Plugin.
    *
-   * @var \Drupal\crop\CropInterface
+   * @var \Drupal\crop\CropInterface|false
    */
-  protected $crop;
+  protected $crop = FALSE;
 
   /**
    * The image factory service.
@@ -54,13 +58,29 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   protected $imageFactory;
 
   /**
+   * Event dispatcher service.
+   *
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   */
+  protected $eventDispatcher;
+
+  /**
+   * The automatic crop providers list.
+   *
+   * @var array
+   */
+  protected $automaticCropProviders;
+
+  /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, CropStorageInterface $crop_storage, ConfigEntityStorageInterface $crop_type_storage, ImageFactory $image_factory) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, CropStorageInterface $crop_storage, ConfigEntityStorageInterface $crop_type_storage, ImageFactory $image_factory, EventDispatcherInterface $event_dispatcher) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $logger);
     $this->storage = $crop_storage;
     $this->typeStorage = $crop_type_storage;
     $this->imageFactory = $image_factory;
+    $this->eventDispatcher = $event_dispatcher;
+    $this->automaticCropProviders = $this->getAutomaticCropProvidersList();
   }
 
   /**
@@ -74,7 +94,8 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
       $container->get('logger.factory')->get('image'),
       $container->get('entity_type.manager')->getStorage('crop'),
       $container->get('entity_type.manager')->getStorage('crop_type'),
-      $container->get('image.factory')
+      $container->get('image.factory'),
+      $container->get('event_dispatcher')
     );
   }
 
@@ -87,21 +108,24 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
       return FALSE;
     }
 
-    if ($crop = $this->getCrop($image)) {
-      $anchor = $crop->anchor();
-      $size = $crop->size();
+    $this->getCrop($image);
+    if (!$this->crop) {
+      return FALSE;
+    }
 
-      if (!$image->crop($anchor['x'], $anchor['y'], $size['width'], $size['height'])) {
-        $this->logger->error('Manual image crop failed using the %toolkit toolkit on %path (%mimetype, %width x %height)', [
+    $anchor = $this->crop->anchor();
+    $size = $this->crop->size();
+
+    if (!$image->crop($anchor['x'], $anchor['y'], $size['width'], $size['height'])) {
+      $this->logger->error('Manual image crop failed using the %toolkit toolkit on %path (%mimetype, %width x %height)', [
           '%toolkit' => $image->getToolkitId(),
           '%path' => $image->getSource(),
           '%mimetype' => $image->getMimeType(),
           '%width' => $image->getWidth(),
           '%height' => $image->getHeight(),
         ]
-        );
-        return FALSE;
-      }
+      );
+      return FALSE;
     }
 
     return TRUE;
@@ -126,6 +150,7 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   public function defaultConfiguration() {
     return parent::defaultConfiguration() + [
       'crop_type' => NULL,
+      'automatic_crop_provider' => NULL,
     ];
   }
 
@@ -133,19 +158,25 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $options = [];
-    foreach ($this->typeStorage->loadMultiple() as $type) {
-      $options[$type->id()] = $type->label();
-    }
-
     $form['crop_type'] = [
       '#type' => 'select',
-      '#title' => t('Crop type'),
+      '#title' => $this->t('Crop type'),
       '#default_value' => $this->configuration['crop_type'],
-      '#options' => $options,
-      '#description' => t('Crop type to be used for the image style.'),
+      '#options' => $this->getCropTypeOptions(),
+      '#description' => $this->t('Crop type to be used for the image style.'),
     ];
 
+    if (!empty($this->automaticCropProviders)) {
+      $form['automatic_crop_provider'] = [
+        '#type' => 'select',
+        '#title' => $this->t('Automatic crop provider'),
+        '#empty_option' => $this->t("- Select a Provider -"),
+        '#options' => $this->automaticCropProviders,
+        '#default_value' => $this->configuration['automatic_crop_provider'],
+        '#description' => $this->t('The name of automatic crop provider to use if crop is not set for an image.'),
+      ];
+    }
+
     return $form;
   }
 
@@ -155,6 +186,22 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::submitConfigurationForm($form, $form_state);
     $this->configuration['crop_type'] = $form_state->getValue('crop_type');
+    $this->configuration['automatic_crop_provider'] = $form_state->getValue('automatic_crop_provider');
+  }
+
+  /**
+   * Get the available cropType options list.
+   *
+   * @return array
+   *   The cropType options list.
+   */
+  public function getCropTypeOptions() {
+    $options = [];
+    foreach ($this->typeStorage->loadMultiple() as $type) {
+      $options[$type->id()] = $type->label();
+    }
+
+    return $options;
   }
 
   /**
@@ -164,14 +211,19 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
    *   Image object.
    *
    * @return \Drupal\Core\Entity\EntityInterface|\Drupal\crop\CropInterface|false
-   *   Crop entity or FALSE if crop doesn't exist.
+   *   Crop entity or FALSE.
    */
   protected function getCrop(ImageInterface $image) {
-    if (!isset($this->crop)) {
-      $this->crop = FALSE;
-      if ($crop = Crop::findCrop($image->getSource(), $this->configuration['crop_type'])) {
-        $this->crop = $crop;
-      }
+    if ($crop = Crop::findCrop($image->getSource(), $this->configuration['crop_type'])) {
+      $this->crop = $crop;
+    }
+
+    if (!$this->crop && !empty($this->configuration['automatic_crop_provider'])) {
+      /** @var \Drupal\crop\Entity\CropType $crop_type */
+      $crop_type = $this->typeStorage->load($this->configuration['crop_type']);
+      $automatic_crop_event = new AutomaticCrop($image, $crop_type, $this->configuration);
+      $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP, $automatic_crop_event);
+      $this->crop = $automatic_crop_event->getCrop();
     }
 
     return $this->crop;
@@ -185,11 +237,10 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
     if (!$crop instanceof CropInterface) {
       return;
     }
-    $size = $crop->size();
 
     // The new image will have the exact dimensions defined for the crop effect.
-    $dimensions['width'] = $size['width'];
-    $dimensions['height'] = $size['height'];
+    $dimensions['width'] = $crop->size()['width'];
+    $dimensions['height'] = $crop->size()['height'];
   }
 
   /**
@@ -205,4 +256,17 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
     return $dependencies;
   }
 
+  /**
+   * Collect automatic crop providers.
+   *
+   * @return array
+   *   All provider
+   */
+  public function getAutomaticCropProvidersList() {
+    $event = new AutomaticCropProviders();
+    $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP_PROVIDERS, $event);
+
+    return $event->getProviders();
+  }
+
 }
diff --git a/templates/crop-crop-summary.html.twig b/templates/crop-crop-summary.html.twig
index 7ba7cc5..94613bd 100644
--- a/templates/crop-crop-summary.html.twig
+++ b/templates/crop-crop-summary.html.twig
@@ -18,4 +18,8 @@
     {% trans %}
     uses <em>{{ data.crop_type|e }}</em> crop type
     {% endtrans %}
+    <br>
+    {% if data.automatic_crop_provider|length %}
+        <em>Automated Crop activated</em>
+    {%- endif %}
 {%- endif %}
diff --git a/tests/src/Functional/CropFunctionalTest.php b/tests/src/Functional/CropFunctionalTest.php
index 8ccf54d..dbfb5c4 100644
--- a/tests/src/Functional/CropFunctionalTest.php
+++ b/tests/src/Functional/CropFunctionalTest.php
@@ -120,7 +120,7 @@ class CropFunctionalTest extends BrowserTestBase {
     $this->testStyle = $this->container->get('entity_type.manager')->getStorage('image_style')->loadUnchanged($this->testStyle->id());
     self::assertEquals($this->testStyle->getEffects()->count(), 1, 'One image effect added to test image style.');
     $effect_configuration = $this->testStyle->getEffects()->getIterator()->current()->getConfiguration();
-    self::assertEquals($effect_configuration['data'], ['crop_type' => $edit['id']], 'Manual crop effect uses correct image style.');
+    self::assertEquals($effect_configuration['data'], ['crop_type' => $edit['id'], 'automatic_crop_provider' => NULL], 'Manual crop effect uses correct image style.');
 
     // Tests the image URI is extended with shortened hash in case of image
     // style and corresponding crop existence.
